namespace UnionGen;

internal static class Types
    {
        public const string TypesSource = $$"""
                                          {{UnionSourceGen.AutoGeneratedComment}}
                                          namespace UnionGen.Types
                                          {
                                              public readonly struct Yes;
                                              public readonly struct No;
                                              public readonly struct Unknown;
                                              public readonly struct True;
                                              public readonly struct False;
                                              public readonly struct All;
                                              public readonly struct Some;
                                              public readonly struct None;
                                              public readonly struct NotFound;
                                              public readonly struct Success;
                                              public readonly struct Success<T>
                                              {
                                                  public Success(T value)
                                                  {
                                                      Value = value;
                                                  }
                                                  public T Value { get; }
                                              }
                                              public readonly struct Result<T>
                                              {
                                                  public Result(T value)
                                                  {
                                                      Value = value;
                                                  }
                                                  public T Value { get; }
                                              }
                                              public readonly struct Error;
                                              public readonly struct Error<T>
                                              {
                                                  public Error(T value)
                                                  {
                                                      Value = value;
                                                  }
                                                  public T Value { get; }
                                              }
                                          }
                                          """;
        
        public const string StateByteSource = $$"""
                                              {{UnionSourceGen.AutoGeneratedComment}}
                                              namespace UnionGen
                                              {
                                                  internal readonly struct StateByte
                                                  {
                                                      private const int IndexMask = 0b0000_1111;
                                                      private const int ActualTypeMask = 0b1111_0000;
                                                      public const byte RefTypeIndex = IndexMask;
                                              
                                                      private readonly byte _state;
                                              
                                                      public StateByte(int index, int actualTypeIndex)
                                                      {
                                                          Index = (byte) index;
                                                          ActualTypeIndex = (byte) actualTypeIndex;
                                                      }
                                              
                                                      public int Index
                                                      {
                                                          get => _state & IndexMask;
                                                          private init
                                                          {
                                                              if (value > IndexMask)
                                                              {
                                                                  throw new ArgumentOutOfRangeException(nameof(value), value,
                                                                                                        $"Value exceeds the maximum value of {IndexMask} for the index.");
                                                              }
                                              
                                                              var cleanState = _state & ActualTypeMask;
                                                              _state = (byte) (cleanState | value);
                                                          }
                                                      }
                                              
                                                      public int ActualTypeIndex
                                                      {
                                                          get => _state >> 4;
                                                          private init
                                                          {
                                                              if (value > IndexMask)
                                                              {
                                                                  throw new ArgumentOutOfRangeException(nameof(value), value,
                                                                                                        $"Value exceeds the maximum value of {IndexMask} for the actual type index.");
                                                              }
                                              
                                                              var shiftedValue = value << 4;
                                                              var cleanState = _state & IndexMask;
                                                              _state = (byte) (cleanState | shiftedValue);
                                                          }
                                                      }
                                                  }
                                              }
                                              """;

        public const string PointerSizeGuardSource = $$"""
                                                     {{UnionSourceGen.AutoGeneratedComment}}
                                                     namespace UnionGen
                                                     {
                                                         internal static class PointerSizeGuard
                                                         {
                                                             public static void EnsureAlignment(int alignment)
                                                             {
                                                                 if (IntPtr.Size > alignment)
                                                                 {
                                                                     throw new
                                                                         NotSupportedException($"Pointer size {IntPtr.Size} is not supported by union source generator - expected {alignment} at most.");
                                                                 }
                                                             }
                                                         }
                                                     }
                                                     """;
        public const string AlignmentEnumSource = $$"""
                                                    {{UnionSourceGen.AutoGeneratedComment}}
                                                    namespace UnionGen
                                                    {
                                                        public enum UnionAlignment
                                                        {
                                                            Unaligned = 0,
                                                            Aligned4 = 4,
                                                            Aligned8 = 8,
                                                            Aligned16 = 16
                                                        }
                                                    }
                                                    """;
    }