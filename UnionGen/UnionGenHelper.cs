using System.Text;

namespace UnionGen;

internal readonly struct UnionGenHelper(UnionToGenerate union)
{
    private const string Indent = "\t\t";

    public string GeneratePartialStruct()
    {
        var (typeFields, typeProperties) = GetFieldsAndProperties();

        var code = $$"""
                     {{UnionSourceGen.AutoGeneratedComment}}
                     namespace {{union.Namespace}}
                     {
                         public readonly partial struct {{union.Name}}
                         {
                     {{typeFields}}
                     {{typeProperties}}
                         }
                     }
                     """;

        return code;
    }

    private (string TypeFields, string TypeProperties) GetFieldsAndProperties()
    {
        var typeFields = new StringBuilder($"{Indent}private readonly int _index;\n");
        for (var i = 0; i < union.TypeParameters.Count; i++)
        {
            var type = union.TypeParameters[i];
            typeFields.AppendLine($"{Indent}private readonly {type} _value{i};");
        }

        var typeProperties = new StringBuilder();
        for (var i = 0; i < union.TypeParameters.Count; i++)
        {
            var type = union.TypeParameters[i];
            Span<char> t = type.ToCharArray();
            t[0] = char.ToUpper(t[0]);
            typeProperties.AppendLine($"{Indent}public bool Is{t.ToString()} => _index == {i};");
        }

        return (typeFields.ToString(), typeProperties.ToString());
    }
}
